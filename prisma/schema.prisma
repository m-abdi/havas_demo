// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model Person {
  id                   String    @id @default(uuid()) @map("_id")
  firstNameAndLastName String?
  place                Place?    @relation(fields: [placeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  placeId              String?   @unique
  state                String?
  city                 String?
  postalCode           String?
  address              String?
  telephone            String?
  mobileNumber         String?
  website              String?
  role                 Role      @relation(fields: [roleId], references: [id])
  roleId               String
  createdAt            DateTime  @default(now())
  editedAt             DateTime  @updatedAt
  fromLicenses         License[] @relation("fromLicenses")
  toLicenses           License[] @relation("toLicenses")
  password             String
  // levels               Level     @relation("levelToPerson")


  Havaleh Havaleh[]
  Stage   Stage[]
}

model Place {
  id               String      @id @default(uuid()) @map("_id")
  name             String      @unique
  superPlace       Place?      @relation("SuperPlaceSubset", fields: [superPlaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  superPlaceId     String?
  subset           Place[]     @relation("SuperPlaceSubset")
  isCategory       Boolean     @default(false)
  representative   Person?
  typeOfWork       String?
  state            String?
  city             String?
  postalCode       String?
  address          String?
  telephone        String?
  mobileNumber     String?
  website          String?
  nationalId       String?
  economicalCode   String?
  registeredNumber String?
  description      String?
  createdAt        String?
  editedAt         String?
  fromLicenses     License[]   @relation("fromLicensesPlace")
  toLicenses       License[]   @relation("toLicensesPlace")
  Asset            Asset[]
  Equipment        Equipment[]
}

model Equipment {
  name              String
  model             String?
  factory           String?
  serialNumber      String
  productionYear    String?
  installationYear  String?
  terminologyCode   String   @id @map("_id")
  hasInstructions   Boolean
  instruction       String?
  picture           String?
  supportCompany    Place?   @relation(fields: [supportCompanyId], references: [id])
  supportCompanyId  String?
  supportTelephone1 String?
  supportTelephone2 String?
  createdAt         DateTime @default(now())
  editedAt          DateTime @updatedAt
  assets            Asset[]
}

model Asset {
  id                 String    @id @default(uuid()) @map("_id")
  equipment          Equipment @relation(fields: [equipmentId], references: [terminologyCode])
  equipmentId        String
  publicPropertyCode String
  place              Place     @relation(fields: [placeId], references: [id])
  placeId            String
  createdAt          DateTime  @default(now())
  editedAt           DateTime  @updatedAt
  tag                Tag?
}

model Tag {
  id        String   @id @default(uuid()) @map("_id")
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String   @unique
  createdAt DateTime @default(now())
  editedAt  DateTime @updatedAt
}

model License {
  id           String   @id @default(uuid()) @map("_id")
  fromPerson   Person   @relation(name: "fromLicenses", fields: [fromPersonId], references: [id])
  fromPersonId String
  toPerson     Person   @relation(name: "toLicenses", fields: [toPersonId], references: [id])
  toPersonId   String
  fromPlace    Place    @relation(name: "fromLicensesPlace", fields: [fromPlaceId], references: [id])
  fromPlaceId  String
  toPlace      Place    @relation(name: "toLicensesPlace", fields: [toPlaceId], references: [id])
  toPlaceId    String
  type         String
  numbers      Int
  date         String
  description  String
  createdAt    DateTime @default(now())
  editedAt     DateTime @updatedAt
  confirmedAt  DateTime
}

model Role {
  id              String   @id @default(uuid()) @map("_id")
  name            String?  @unique
  viewPerson      Boolean  @default(false)
  createPerson    Boolean
  editPerson      Boolean
  deletePerson    Boolean
  viewPlace       Boolean  @default(false)
  createPlace     Boolean
  editPlace       Boolean
  deletePlace     Boolean
  viewEquipment   Boolean  @default(false)
  createEquipment Boolean
  editEquipment   Boolean
  deleteEquipment Boolean
  viewAsset       Boolean  @default(false)
  createAsset     Boolean
  editAsset       Boolean
  deleteAsset     Boolean
  viewLicense     Boolean  @default(false)
  createLicense   Boolean
  editLicense     Boolean
  deleteLicense   Boolean
  viewTag         Boolean  @default(false)
  createTag       Boolean
  editTag         Boolean
  deleteTag       Boolean
  viewRole        Boolean  @default(false)
  createRole      Boolean
  editRole        Boolean
  deleteRole      Boolean
  Person          Person[]
  createdAt       DateTime @default(now())

}

// model Level {
//   stageID             String   @id @map("_id")
//   stageName           String
//   byUser              Person   @relation("levelToPerson", references: [id], fields: [byUserId])
//   byUserId            String
//   byUsersWithRoles    Role[]   @relation(references: [id], fields: [byUsersWithRolesIds])
//   byUsersWithRolesIds String[]

//   Process              Process? @relation(fields: [processProcessNumber], references: [processNumber])
//   processProcessNumber String?
// }

model Havaleh {
  id                          String   @id @map("_id")
  date                        DateTime @default(now())
  corporationRepresentative   Person   @relation(references: [id], fields: [corporationRepresentativeId])
  corporationRepresentativeId String
  deliverer                   String
  transportationName          String
  transportationTelephone     String
  transportationTelephone2    String
  description          String
  receivingDescription        String

}

model Stage {
  stageID           String    @id @map("_id")
  stageName         String
  submittedByUser   Person    @relation(fields: [submittedByUserId], references: [id])
  submittedByUserId String
  havalehData       String
  dateCreated       DateTime  @default(now())
  dateModified      DateTime  @updatedAt
  Workflow          Workflow? @relation(fields: [workflowId], references: [id])
  workflowId        String?
}

model Process {
  processNumber String     @id @default(uuid()) @map("_id")
  processName   String
  ignoreStage   Int
  // levels        Level[]    @relation(references: [stageID], fields: [levelsIds])
  // levelsIds     String[]
  workflows     Workflow[]
}

model Workflow {
  id                  String   @id @default(uuid()) @map("_id")
  workflowNumber      Int
  instanceOfProcess   Process  @relation(fields: [instanceOfProcessId], references: [processNumber])
  instanceOfProcessId String
  passedStageNames    String[]
  nextStageName       String
  passedStages        Stage[]
}

enum LicenseType {
  ENTER
  EXIT
}
